plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true

    // When true, this property will have all IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }

            //You have to set mixin propert if you want to run playerAnimator in development environment.
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }

            //Add this to the server too.
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    maven { url 'https://api.modrinth.com/maven' }
    maven { url "https://maven.shedaniel.me/" }
    repositories {
        maven {
            url "https://cursemaven.com"
        }
    }
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:1.0.2-rc1+1.20")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:11.1.136")
    implementation fg.deobf('maven.modrinth:better-combat:1.8.6+1.20.1-forge')

    implementation fg.deobf("curse.maven:mmmmmmmmmmmm-225738:6237015")
    implementation fg.deobf("curse.maven:selene-499980:6507197")
    implementation fg.deobf("curse.maven:embeddium-908741:5681725")
    implementation fg.deobf("curse.maven:shoulder-surfing-reloaded-243190:6499361")
    implementation fg.deobf("curse.maven:worldedit-225608:4586218")
    implementation fg.deobf("curse.maven:architectury-api-419699:5137938")
    implementation fg.deobf("curse.maven:skinchanger-378549:5848572")
    implementation fg.deobf("curse.maven:mouse-tweaks-60089:5338457")
    implementation fg.deobf("curse.maven:jade-324717:6271651")
    implementation fg.deobf("curse.maven:item-highlighter-521590:4985588")
    implementation fg.deobf("curse.maven:inventory-sorter-240633:5979609")
    implementation fg.deobf("curse.maven:explosive-enhancement-reforged-1036246:5960819")
    implementation fg.deobf("curse.maven:oculus-581495:6020952")
    implementation fg.deobf("curse.maven:cosmetic-armor-reworked-237307:4600191")
    implementation fg.deobf("curse.maven:cupboard-326652:5470032")
    implementation fg.deobf("curse.maven:fix-gpu-memory-leak-882495:4884976")
    implementation fg.deobf("curse.maven:resourceful-lib-570073:5659871")
    implementation fg.deobf("curse.maven:stitch-841890:5176879")
    //implementation fg.deobf("curse.maven:chipped-456956:5813138")
    implementation fg.deobf("curse.maven:puzzles-lib-495476:6387081")
    implementation fg.deobf("curse.maven:overflowing-bars-852662:5763974")
    implementation fg.deobf("curse.maven:configured-457570:5180900")
    implementation fg.deobf("curse.maven:prism-lib-638111:4650325")
    implementation fg.deobf("curse.maven:iceberg-520110:5838149")
    implementation fg.deobf("curse.maven:kotlin-for-forge-351264:5402061")
    implementation fg.deobf("curse.maven:resourcify-870076:6255667")
    implementation fg.deobf("curse.maven:octo-lib-916747:6274623")
    implementation fg.deobf("curse.maven:immersive-ui-1021685:6023593")
    implementation fg.deobf("curse.maven:appleskin-248787:4770828")
    implementation fg.deobf("curse.maven:legendary-tooltips-532127:4662781")
    implementation fg.deobf("curse.maven:particle-core-985426:6427560")
    implementation fg.deobf("curse.maven:model-gap-fix-676136:5200949")
    implementation fg.deobf("curse.maven:loot-journal-700723:5813449")
    implementation fg.deobf("curse.maven:chat-heads-407206:6483021")
    implementation fg.deobf("curse.maven:clearsky-936871:4863932")
    implementation fg.deobf("curse.maven:perception-1112793:6451454")
    implementation fg.deobf("curse.maven:fzzy-config-1005914:6582106")
    implementation fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:6172935")
    implementation fg.deobf("curse.maven:potionlevelfix-1070801:5787723")
    implementation fg.deobf("curse.maven:brutality-a-terramity-addon-1298802:6722189")

//    implementation fg.deobf("curse.maven:cloth-config-348521:5729104")
//    implementation fg.deobf("curse.maven:text-placeholder-api-1037459:6131409")
//    implementation fg.deobf("curse.maven:modmenu-308702:5162837")
//    implementation fg.deobf("curse.maven:loot-beams-up-1161712:6313515")
//    implementation fg.deobf("curse.maven:forgified-fabric-api-889079:6289136")
//    implementation fg.deobf("curse.maven:sinytra-connector-890127:5761411")

    // Terramity thingamajigs
    implementation fg.deobf("curse.maven:terramity-1084134:6054971")
    implementation fg.deobf("curse.maven:patchouli-306770:6164575")
    implementation fg.deobf("curse.maven:geckolib-388172:6333474")
    implementation fg.deobf("curse.maven:curios-309927:6418456")
    implementation fg.deobf("curse.maven:caelus-308989:5281700")

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description, mod_credits: mod_credits
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
